{"version":3,"sources":["index.js"],"names":["matrix","document","getElementById","outputX","outputY","matrixOffset","getClientRects","scaleXMax","width","scaleYMax","height","readings","renderClick","x","y","context","className","clickDot","createElement","style","position","left","top","appendChild","percentalize","value","max","renderMean","values","meanX","meanY","forEach","reading","length","renderMedian","xReadings","map","yReadings","sort","sortNumAsc","Math","floor","a","b","clearBoxDots","querySelectorAll","dot","parentElement","removeChild","renderAll","reset","addEventListener","event","percX","clientX","percY","clientY","push","window"],"mappings":";AAAA,IAAMA,EAASC,SAASC,eAAe,aACjCC,EAAUF,SAASC,eAAe,WAClCE,EAAUH,SAASC,eAAe,WAClCG,EAAeL,EAAOM,iBAAiB,GACvCC,EAAYF,EAAaG,MACzBC,EAAYJ,EAAaK,OACzBC,EAAW,GAUjB,SAASC,EAAaC,EAAGC,EAAGC,EAASC,GAC7BC,IAAAA,EAAWhB,SAASiB,cAAc,OACxCD,EAASD,UAA2BA,eAAAA,OAAAA,GACpCC,EAASE,MAAMC,SAAW,WAC1BH,EAASE,MAAME,KAAUR,GAAAA,OAAAA,EAAzB,KACAI,EAASE,MAAMG,IAASR,GAAAA,OAAAA,EAAxB,KACAC,EAAQQ,YAAYN,GAGtB,SAASO,EAAcC,EAAOC,GACrBD,OAAQ,IAARA,EAAcC,EAIvB,SAASC,EAAYC,GACfC,IAAAA,EAAQ,EACRC,EAAQ,EAEZF,EAAOG,QAAQ,SAAAC,GACbH,GAASG,EAAQ,GACjBF,GAASE,EAAQ,KAGnBH,GAAgBD,EAAOK,OACvBH,GAAgBF,EAAOK,OAEvBrB,EAAYiB,EAAOC,EAAO9B,EAAQ,oBAGpC,SAASkC,EAAcN,GACfO,IAAAA,EAAYP,EAAOQ,IAAI,SAAAJ,GACpBA,OAAAA,EAAQ,KAEXK,EAAYT,EAAOQ,IAAI,SAAAJ,GACpBA,OAAAA,EAAQ,MAGjBG,EAAUG,KAAKC,GACfF,EAAUC,KAAKC,GAGXX,EAAOK,OAAS,GAAM,GAIxBrB,GAHiBuB,EAAUP,EAAOK,OAAQ,GAAKE,EAAWP,EAAOK,OAAQ,EAAK,IAAM,GACnEI,EAAUT,EAAOK,OAAQ,GAAKI,EAAWT,EAAOK,OAAQ,EAAK,IAAM,EAEtDjC,EAAQ,sCAKtCY,EAHgBuB,EAAUK,KAAKC,MAAMb,EAAOK,OAAS,IACrCI,EAAUG,KAAKC,MAAMb,EAAOK,OAAS,IAEvBjC,EAAQ,sCAG/BuC,SAAAA,EAAWG,EAAGC,GACdD,OAAAA,EAAIC,GAIf,SAASC,IACP3C,SAAS4C,iBAAiB,qBAAqBd,QAAQ,SAAAe,GACrDA,EAAIC,cAAcC,YAAYF,KAIlC,SAASG,EAAWrB,GAClBgB,IAEAjB,EAAWC,GACXM,EAAaN,GAEbjB,EAASoB,QAAS,SAAAC,GAChBpB,EAAYoB,EAAQ,GAAIA,EAAQ,GAAIhC,KAIxC,SAASkD,IACPN,IACAjC,EAASsB,OAAS,EArFpBjC,EAAOmD,iBAAiB,QAAS,SAACC,GAC1BC,IAAAA,EAAQ7B,EAAa4B,EAAME,QAAUjD,EAAagB,KAAMd,GACxDgD,EAAQ/B,EAAa4B,EAAMI,QAAUnD,EAAaiB,IAAKb,GAE7DE,EAAS8C,KAAK,CAACJ,EAAOE,IACtB3C,EAAYyC,EAAOE,EAAOvD,EAAQ,+DAoFpC0D,OAAOT,UAAYA,EACnBS,OAAOR,MAAQA,EACfQ,OAAO/C,SAAWA","file":"src.29f2d11e.map","sourceRoot":"../src","sourcesContent":["const matrix = document.getElementById('clickArea');\nconst outputX = document.getElementById('outputX');\nconst outputY = document.getElementById('outputY');\nconst matrixOffset = matrix.getClientRects()[0];\nconst scaleXMax = matrixOffset.width;\nconst scaleYMax = matrixOffset.height;\nconst readings = [];\n\nmatrix.addEventListener('click', (event) => {\n  const percX = percentalize(event.clientX - matrixOffset.left, scaleXMax);\n  const percY = percentalize(event.clientY - matrixOffset.top, scaleYMax);\n\n  readings.push([percX, percY]);\n  renderClick(percX, percY, matrix, 'click-point--fade-out click-point--big click-point--green');\n});\n\nfunction renderClick (x, y, context, className) {\n  const clickDot = document.createElement('div');\n  clickDot.className = `click-point ${className}`;\n  clickDot.style.position = 'absolute';\n  clickDot.style.left = `${x}%`;\n  clickDot.style.top = `${y}%`;\n  context.appendChild(clickDot);\n}\n\nfunction percentalize (value, max) {\n  return value * 100 / max;\n}\n\n// Calculates two dimentional array mean for each row\nfunction renderMean (values) {\n  let meanX = 0;\n  let meanY = 0;\n\n  values.forEach(reading => {\n    meanX += reading[0];\n    meanY += reading[1];\n  });\n\n  meanX = meanX / values.length;\n  meanY = meanY / values.length;\n\n  renderClick(meanX, meanY, matrix, 'click-point--big');\n}\n\nfunction renderMedian (values) {\n  const xReadings = values.map(reading => {\n    return reading[0];\n  });\n  const yReadings = values.map(reading => {\n    return reading[1];\n  });\n\n  xReadings.sort(sortNumAsc);\n  yReadings.sort(sortNumAsc);\n\n  // find middle value\n  if (values.length % 2 === 0) {\n    const medianX = (xReadings[values.length /2] + xReadings[(values.length /2) - 1]) / 2;\n    const medianY = (yReadings[values.length /2] + yReadings[(values.length /2) - 1]) / 2;\n\n    renderClick(medianX, medianY, matrix, 'click-point--big click-point--blue');\n  } else {\n    const medianX = xReadings[Math.floor(values.length / 2)];\n    const medianY = yReadings[Math.floor(values.length / 2)];\n\n    renderClick(medianX, medianY, matrix, 'click-point--big click-point--blue');\n  }\n\n  function sortNumAsc(a, b) {\n    return a - b;\n  }\n}\n\nfunction clearBoxDots () {\n  document.querySelectorAll('.box .click-point').forEach(dot => {\n    dot.parentElement.removeChild(dot);\n  });\n}\n\nfunction renderAll (values) {\n  clearBoxDots();\n\n  renderMean(values);\n  renderMedian(values);\n\n  readings.forEach( reading => {\n    renderClick(reading[0], reading[1], matrix);\n  });\n}\n\nfunction reset () {\n  clearBoxDots();\n  readings.length = 0;\n}\n\n// export global functions\nwindow.renderAll = renderAll;\nwindow.reset = reset;\nwindow.readings = readings;\n"]}